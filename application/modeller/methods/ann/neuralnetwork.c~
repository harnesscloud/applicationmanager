#include <Python.h>
#include "floatfann.h"
#include <stdio.h>


const float desired_error = (const float) 10.000;
const unsigned int max_epochs = 10000;
const unsigned int epochs_between_reports = 5000;
const fann_type min_weight = -0.2;
const fann_type max_weight = 0.2;


struct fann *ann;
 
 
 void _create(int units_per_layer, int layers)
 {
 	//create network
    ann = fann_create_standard_array(units_per_layer, layers);
    
    fann_set_training_algorithm(ann, FANN_TRAIN_RPROP);
    
    fann_set_activation_function_hidden(ann, FANN_LINEAR);
    fann_set_activation_function_output(ann, FANN_LINEAR);
    fann_randomize_weights(ann, min_weight, max_weight);
	fann_set_learning_momentum(ann,0.03);
 	fann_set_learning_rate(ann, 0.9);
    fann_print_connections(ann);

 	fann_get_training_algorithm(ann);
 
 	printf("OK");
 }
 
 void _train(struct fann_train_data *data)
 {
 	//train network
    fann_train_on_data(ann, data, max_epochs,epochs_between_reports, desired_error);
    //save network in file
    //fann_save(ann, *(argv + 1));
 
 }
 
 
 void _predict()
 {
 
 
 }
 
 
 void _destroy()
 {
 	fann_destroy(ann); 
 }
 
 
static PyObject*
create(PyObject* self, PyObject* args)
{
	int units_per_layers, layers;
 
    if (!PyArg_ParseTuple(args, "units_per_layer", &units_per_layers))
        return NULL;
	if (!PyArg_ParseTuple(args, "layers", &layers))
        return NULL;
        
    return Py_BuildValue("ann", _create(units_per_layer, layers));
}


void train(PyObject* self, PyObject* args)
{
    struct 	fann_train_data 	* data;
 
    if (!PyArg_ParseTuple(args, "data", &data))
        return NULL;
 
    _train(data);
}


static PyObject*
predict(PyObject* self, PyObject* args)
{
    int n;
 
    if (!PyArg_ParseTuple(args, "i", &n))
        return NULL;
 
    return Py_BuildValue("result", _predict(n));
}


void destroy(PyObject* self, PyObject* args)
{
     
    _destroy(ann);
}




 
static PyMethodDef ANNMethods[] = {
    {"create", create, METH_VARARGS, "Create a neural network."},
    {"train", train, METH_VARARGS, "Train a neural network."},
    {"predict", predict, METH_VARARGS, "Test the neural network."},
    {"destroy", destroy, METH_VARARGS, "Test the neural network."},
    {NULL, NULL, 0, NULL}
};

 
PyMODINIT_FUNC
initneuralnetwork(void)
{
    (void) Py_InitModule("neuralnetwork", ANNMethods);
}







int main(int argc, char **argv)
{    
	printf("Name :%s", *(argv +1));
	if ((*(argv + 1) == NULL) || ((strncmp(*(argv + 1), "-h") != 0) && ((strncmp(*(argv + 1), "-help") != 0))))
	{
		printf("\n\nProgram arguments:\n  -  [network name] [file with training data] [layer1 layer2 layer3 ...] \n  -  [-h/-help] - display help\n\n");
		return 1;
	}
    
    
    //get network topology from arguments
    printf("Network name : %s\n", *(argv + 1));
    printf("Train data   : %s\n", *(argv + 2));
	int arg_num = 3;
	printf("Prediction input :"); 
	while (*(argv + arg_num))
	{
		printf(" %s", *(argv + arg_num));
		arg_num++;
	}
	arg_num = arg_num - 3;
	printf("\n");
	
	//set network layers
    const unsigned int layers_count = arg_num;
	unsigned int layers[arg_num];
	
	arg_num = 0;
    while (*(argv + arg_num + 3))
	{
		layers[arg_num] = atoi(*(argv + arg_num + 3));
		arg_num++;
	}
	
    
    
    
    fann_destroy(ann);
	printf("\n");
    return 0;
}

